// Path: lib/screen/changePasswordScreen/change_password_bloc.dart

import 'package:flutter/material.dart';
import 'package:connectivity_plus/connectivity_plus.dart' as cp; // Alias connectivity_plus
import 'package:rxdart/rxdart.dart'; // <-- ADD THIS IMPORT

import '../../commonView/validator.dart';
import '../../network/api_response.dart';
import '../../network/base_dl.dart';
import '../../network/app_exceptions.dart'; // <-- ADD THIS IMPORT
import '../../utils/bloc.dart';
import '../../utils/common_util.dart';
import '../loginScreen/login_screen.dart'; // Import LoginScreen for navigation
import 'change_password_repo.dart';
import 'change_password_screen.dart';


class ChangePasswordBloc implements Bloc { // Changed from 'extends Bloc'
  String tag = "ChangePasswordBloc>>>";
  final oldPassController = TextEditingController();
  final newPassController = TextEditingController();
  final rePassController = TextEditingController();
  final formKey = GlobalKey<FormState>();
  // Use BehaviorSubject for loading/success/error state
  final _subject = BehaviorSubject<ApiResponse<BaseModel>>();
  BuildContext context;
  final ChangePasswordRepo _changePasswordRepo = ChangePasswordRepo();
  // Use BehaviorSubject for button enabled state
  final submitValid = BehaviorSubject<bool>.seeded(false); // Seed with false
  State<ChangePasswordScreen> state;

  ChangePasswordBloc(this.context, this.state);

  // Expose streams for UI
  Stream<ApiResponse<BaseModel>> get updateStream => _subject.stream;
  Stream<bool> get submitValidStream => submitValid.stream; // Expose validity stream

  submit() async {
    // Validate form first
    if (!(formKey.currentState?.validate() ?? false)) {
      return;
    }
    FocusManager.instance.primaryFocus?.unfocus();

    if (_subject.isClosed) return; // Check stream status

    var connectivityResult = await cp.Connectivity().checkConnectivity(); // Use alias
    if (!connectivityResult.contains(cp.ConnectivityResult.none)) { // Use alias
      _subject.sink.add(ApiResponse.loading());
      try {
        var response = BaseModel.fromJson(await _changePasswordRepo.changePassword(
            oldPassController.text.trim(), newPassController.text.trim()));

        if (!state.mounted) return; // Check mounted after await

        String message = response.message;
        // Pass false for isLogout, handle navigation here
        if (isApiStatus(context, response.status, message, false)) {
          _subject.sink.add(ApiResponse.completed(response));
          openSimpleSnackbar(languages.passChangeSuccessMsg);
          // Decide navigation: Pop or replace depends on where user came from
          if (Navigator.canPop(context)) {
             Navigator.pop(context); // Pop back if possible
          } else {
             // If launched directly, maybe go somewhere else? Or stay?
             // For now, just clear fields or show success state
             oldPassController.clear();
             newPassController.clear();
             rePassController.clear();
             formKey.currentState?.reset(); // Reset form state
             buttonHide(); // Recalculate button state
          }
          // openScreenWithReplacePrevious(context, const ChangePasswordScreen()); // Avoid replacing with self
        } else {
          // isApiStatus might handle UI, update stream state
          _subject.sink.add(ApiResponse.error(message));
           if (response.status != 3) openSimpleSnackbar(message); // Show error if not handled
        }
      } catch (e) {
        if (!state.mounted) return;
         String errorMessage = e is Exception ? e.toString() : languages.unknownError;
        logd(tag, "Change Password Error: $e");
        openSimpleSnackbar(errorMessage);
        _subject.sink.add(ApiResponse.error(errorMessage));
      }
    } else { // No internet
      if (!state.mounted) return;
      _subject.sink.add(ApiResponse.error(languages.noInternet));
      openSimpleSnackbar(languages.noInternet);
    }
  }

  // Call this whenever a text field changes
  buttonHide() {
    // Use validation functions directly, check if they return empty string
    String oldPassError = validateOldPassword(oldPassController.text);
    String newPassError = validateNewPassword(newPassController.text);
    // Important: Pass the actual new password text for comparison
    String rePassError = validateConfPassword(rePassController.text, newPassController.text);

    // Button is valid if all fields have text AND all validation errors are empty
    bool isValid = oldPassController.text.isNotEmpty &&
                   newPassController.text.isNotEmpty &&
                   rePassController.text.isNotEmpty &&
                   oldPassError.isEmpty &&
                   newPassError.isEmpty &&
                   rePassError.isEmpty;

    // Update stream only if value changes
    if (submitValid.valueOrNull != isValid) {
      submitValid.add(isValid);
    }
  }

  @override
  void dispose() {
    oldPassController.dispose();
    newPassController.dispose();
    rePassController.dispose();
    _subject.close();
    submitValid.close();
     // No super.dispose needed
  }
}